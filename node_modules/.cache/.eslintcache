[{"C:\\Users\\manis\\OneDrive\\Desktop\\interview\\src\\index.js":"1","C:\\Users\\manis\\OneDrive\\Desktop\\interview\\src\\App.js":"2","C:\\Users\\manis\\OneDrive\\Desktop\\interview\\src\\FirstSibling.jsx":"3","C:\\Users\\manis\\OneDrive\\Desktop\\interview\\src\\SecondSibling.jsx":"4"},{"size":179,"mtime":1680489777794,"results":"5","hashOfConfig":"6"},{"size":933,"mtime":1680513656772,"results":"7","hashOfConfig":"6"},{"size":169,"mtime":1680496885416,"results":"8","hashOfConfig":"6"},{"size":467,"mtime":1680510988931,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"r892b7",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\manis\\OneDrive\\Desktop\\interview\\src\\index.js",[],[],"C:\\Users\\manis\\OneDrive\\Desktop\\interview\\src\\App.js",["22"],[],"C:\\Users\\manis\\OneDrive\\Desktop\\interview\\src\\FirstSibling.jsx",[],[],"C:\\Users\\manis\\OneDrive\\Desktop\\interview\\src\\SecondSibling.jsx",["23"],[],{"ruleId":"24","severity":1,"message":"25","line":12,"column":15,"nodeType":"26","endLine":16,"endColumn":13},{"ruleId":"24","severity":1,"message":"27","line":14,"column":6,"nodeType":"28","endLine":14,"endColumn":21,"suggestions":"29"},"react-hooks/exhaustive-deps","Assignments to the 'timeout' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","React Hook useEffect has missing dependencies: 'counter' and 'render'. Either include them or remove the dependency array. You can also do a functional update 'setCounter(c => ...)' if you only need 'counter' in the 'setCounter' call.","ArrayExpression",["30"],{"desc":"31","fix":"32"},"Update the dependencies array to be: [counter, props.counter, render]",{"range":"33","text":"34"},[342,357],"[counter, props.counter, render]"]